{"version":3,"file":"u-waterfall.js","sources":["uni_modules/uview-plus/components/u-waterfall/u-waterfall.vue","D:/sougougaosuxiazai/HBuilderX.4.76.2025082103/HBuilderX/plugins/uniapp-cli-vite/uniComponent:/RTovdW5pYXBwL3RvdXJpc211bmlhcHAvdW5pX21vZHVsZXMvdXZpZXctcGx1cy9jb21wb25lbnRzL3Utd2F0ZXJmYWxsL3Utd2F0ZXJmYWxsLnZ1ZQ"],"sourcesContent":["<template>\r\n    <view class=\"u-waterfall\">\r\n        <!-- 新增支持多列布局 -->\r\n        <view \r\n            v-for=\"(column, index) in columnList\" \r\n            :key=\"index\"\r\n            :ref=\"`u-column-${index}`\"\r\n            :id=\"`u-column-${index}`\"\r\n            class=\"u-column\"\r\n        >\r\n            <slot name=\"column\"\r\n                :colIndex=\"index\" \r\n                :colList=\"column\">\r\n            </slot>\r\n            <slot name=\"left\"\r\n                :colIndex=\"index\" \r\n                :leftList=\"column\">\r\n            </slot>\r\n            <template v-if=\"!$slots['left'] && !$slots['column']\" v-for=\"(item, itemIndex) in column\" :key=\"itemIndex\">\r\n                <slot :item=\"item\" :itemIndex=\"itemIndex\"></slot>\r\n            </template>\r\n        </view>\r\n    </view>\r\n</template>\r\n\r\n<script>\r\n    /**\r\n     * waterfall 瀴布流\r\n     * @description 这是一个瀑布流形式的组件，对原组件进行升级已经支持自定义列数模式，便于适配不同屏幕。搭配loadMore 加载更多组件，让您开箱即用，眼前一亮。\r\n     * @tutorial https://uview-plus.jiangruyi.com/components/waterfall.html\r\n     * @property {Array} flow-list 用于渲染的数据\r\n     * @property {String Number} add-time 单条数据添加到队列的时间间隔，单位ms，见上方注意事项说明（默认200）\r\n     * @property {String Number} columns 瀑布流列数，默认为2，设置为auto时自动根据屏幕宽度调整列数\r\n     * @example <u-waterfall :flowList=\"flowList\"></u-waterfall>\r\n     */\r\n    import { mpMixin } from '../../libs/mixin/mpMixin';\r\n\timport { mixin } from '../../libs/mixin/mixin';\r\n    import { sleep } from '../../libs/function/index';\r\n    export default {\r\n        name: \"u-waterfall\",\r\n        props: {\r\n            // #ifdef VUE2\r\n            value: {\r\n                // 瀑布流数据\r\n                type: Array,\r\n                required: true,\r\n                default: function() {\r\n                    return [];\r\n                }\r\n            },\r\n            // #endif\r\n            // #ifdef VUE3\r\n            modelValue: {\r\n                // 瀑布流数据\r\n                type: Array,\r\n                required: true,\r\n                default: function() {\r\n                    return [];\r\n                }\r\n            },\r\n            // #endif\r\n            // 每次向结构插入数据的时间间隔，单位ms\r\n            // 单位ms\r\n            addTime: {\r\n                type: [Number, String],\r\n                default: 200\r\n            },\r\n            // id值，用于清除某一条数据时，根据此idKey名称找到并移除，如数据为{idx: 22, name: 'lisa'}\r\n            // 那么该把idKey设置为idx\r\n            idKey: {\r\n                type: String,\r\n                default: 'id'\r\n            },\r\n            // 瀑布流列数\r\n            columns: {\r\n                type: [Number, String],\r\n                default: 2\r\n            },\r\n            // 瀑布流最小列数\r\n            columnsMin: {\r\n                type: [Number, String],\r\n                default: 2\r\n            },\r\n            // 最小列宽\r\n            minColumnWidth: {\r\n                type: Number,\r\n                default: 230\r\n            }\r\n        },\r\n        mixins: [mpMixin, mixin],\r\n        data() {\r\n            return {\r\n                columnList: [[]], // 存储每列的数据\r\n                children: [],\r\n                // 用于标记是否已经初始化\r\n                initialized: false,\r\n                windowWidth: 375,\r\n                windowHeight: 0\r\n            }\r\n        },\r\n        watch: {\r\n            copyFlowList: {\r\n                handler(nVal, oVal) {\r\n                    if (!nVal || nVal.length == 0) {\r\n                        this.clear(false);\r\n                    } else {\r\n                        if (this.columnList.length == 1) {\r\n                            this.initColumnList()\r\n                        }\r\n                        // 取差值，即这一次数组变化新增的部分\r\n                        let startIndex = Array.isArray(oVal) && oVal.length > 0 ? oVal.length : 0;\r\n                        // 直接处理数据，不再使用tempList和splitData\r\n                        this.handleData(nVal.slice(startIndex));\r\n                    }\r\n                },\r\n                immediate: true\r\n            },\r\n            columns: {\r\n                handler() {\r\n                    this.initColumnList();\r\n                    // 重新分配数据\r\n                    if (this.copyFlowList.length > 0) {\r\n                        this.redistributeData();\r\n                    }\r\n                },\r\n                immediate: false\r\n            }\r\n        },\r\n        created() { \r\n            this.initColumnList();\r\n        },\r\n        mounted() {\r\n            this.initialized = true;\r\n            // 添加窗口大小变化监听\r\n            // #ifdef H5\r\n            if (this.columns === 'auto') {\r\n                uni.onWindowResize(this.handleWindowResize);\r\n            }\r\n            // #endif\r\n        },\r\n        // 添加beforeUnmount生命周期清理事件监听\r\n        // #ifdef VUE3\r\n        beforeUnmount() {\r\n            // #ifdef H5\r\n            if (this.columns === 'auto') {\r\n                uni.offWindowResize(this.handleWindowResize);\r\n            }\r\n            // #endif\r\n        },\r\n        // #endif\r\n        // #ifdef VUE2\r\n        beforeDestroy() {\r\n            // #ifdef H5\r\n            if (this.columns === 'auto') {\r\n                window.removeEventListener('resize', this.handleWindowResize);\r\n            }\r\n            // #endif\r\n        }\r\n        // #endif\r\n        computed: {\r\n            // 破坏flowList变量的引用，否则watch的结果新旧值是一样的\r\n            copyFlowList() {\r\n                // #ifdef VUE3\r\n                if (!this.modelValue || this.modelValue.length == 0) {\r\n                    // console.log('clear');\r\n                    return [];\r\n                } else {\r\n                    return this.cloneData(this.modelValue);\r\n                }\r\n                // #endif\r\n                // #ifdef VUE2\r\n                return this.cloneData(this.value);\r\n                // #endif\r\n            }\r\n        },\r\n        emits: ['update:modelValue'],\r\n        methods: {\r\n            // 初始化列数据数组\r\n            initColumnList() {\r\n                this.windowWidth = uni.getSystemInfoSync().windowWidth;\r\n                const cols = this.getColumnsCount();\r\n                // console.log(cols)\r\n                this.columnList = Array.from({ length: cols }, () => []);\r\n            },\r\n            \r\n            // 获取列数，支持auto模式\r\n            getColumnsCount() {\r\n                if (this.columns === 'auto') {\r\n                    // 列间距为10rpx(约等于7px)\r\n                    const columnGap = 7;\r\n                    // 计算可容纳的列数\r\n                    let columnCount = Math.max(1, Math.floor(this.windowWidth / (this.minColumnWidth + columnGap)));\r\n                    if (columnCount < this.columnsMin) {\r\n                        columnCount = this.columnsMin\r\n                    }\r\n                    return columnCount;\r\n                }\r\n                return parseInt(this.columns) || 2;\r\n            },\r\n            \r\n            // 窗口大小变化处理函数\r\n            handleWindowResize(res) {\r\n                this.windowWidth = res.size.windowWidth\r\n                this.windowHeight = res.size.windowHeight\r\n                // 防抖处理，避免频繁触发\r\n                if (this.resizeTimer) {\r\n                    clearTimeout(this.resizeTimer);\r\n                }\r\n                this.resizeTimer = setTimeout(() => {\r\n                    const newColumnsCount = this.getColumnsCount();\r\n                    const oldColumnsCount = this.columnList.length;\r\n                    \r\n                    // 只有列数发生变化时才重新分配数据\r\n                    if (newColumnsCount !== oldColumnsCount) {\r\n                        this.redistributeData();\r\n                    }\r\n                }, 300);\r\n            },\r\n            \r\n            // 重新分配所有数据\r\n            async redistributeData() {\r\n                // 清空所有列\r\n                this.initColumnList();\r\n                // 保存所有数据\r\n                const allData = this.cloneData(this.copyFlowList);\r\n                // 重新分配数据\r\n                this.handleData(allData);\r\n            },\r\n            \r\n            // 处理新增数据\r\n            async handleData(newData) {\r\n                if (!newData || newData.length === 0) return;\r\n                \r\n                // 初始化列高度数组\r\n                const columnHeights = new Array(this.columnList.length).fill(0);\r\n                \r\n                // 获取各列当前高度\r\n                for (let i = 0; i < this.columnList.length; i++) {\r\n                    try {\r\n                        const rect = await this.$uGetRect(`#u-column-${i}`);\r\n                        // console.log(`#u-column-${i}`, rect.height)\r\n                        columnHeights[i] = rect.height || 0;\r\n                    } catch (e) {\r\n                        columnHeights[i] = 0;\r\n                    }\r\n                }\r\n                \r\n                // 分配新数据到最短的列\r\n                for (let item of newData) {\r\n                    const minHeightIndex = columnHeights.indexOf(Math.min(...columnHeights));\r\n                    // console.log('this.columnList', this.columnList)\r\n                    this.columnList[minHeightIndex].push(item);\r\n                    \r\n                    // 获取实际渲染后的元素高度而不是估算\r\n                    await sleep(30)\r\n                    this.$nextTick(async () => {\r\n                    try {\r\n                        const rect = await this.$uGetRect(`#u-column-${minHeightIndex}`);\r\n                        // console.log(`#u-column-${minHeightIndex}`, rect.height)\r\n                        if (rect.height) {\r\n                            columnHeights[minHeightIndex] = rect.height\r\n                        }\r\n                    } catch (e) {\r\n                        // console.log(e)\r\n                        // columnHeights[i] = 0;\r\n                    }\r\n                    });\r\n                    // this.$nextTick(async () => {\r\n                    //     try {\r\n                    //         // 等待DOM更新后获取实际高度\r\n                    //         const lastIndex = this.columnList[minHeightIndex].length - 1;\r\n                    //         const el = this.$refs[`u-column-${minHeightIndex}`][0].children[lastIndex];\r\n                    //         if (el) {\r\n                    //             const rect = await this.$uGetRect(el);\r\n                    //             const actualHeight = rect.height || 100;\r\n                    //             columnHeights[minHeightIndex] += actualHeight;\r\n                    //         } else {\r\n                    //             // 备用方案：如果无法获取实际高度，则使用默认值\r\n                    //             columnHeights[minHeightIndex] += 100;\r\n                    //         }\r\n                    //     } catch (e) {\r\n                    //         // 出错时使用默认高度\r\n                    //         console.log(e)\r\n                    //         columnHeights[minHeightIndex] += 100;\r\n                    //     }\r\n                    // });\r\n                }\r\n            },\r\n\r\n            // 复制而不是引用对象和数组\r\n            cloneData(data) {\r\n                return JSON.parse(JSON.stringify(data));\r\n            },\r\n            \r\n            // 清空数据列表\r\n            clear(bak = true) {\r\n                this.initColumnList();\r\n                // 同时清除父组件列表中的数据\r\n                if (bak) {\r\n                    // #ifdef VUE2\r\n                    this.$emit('input', []);\r\n                    // #endif\r\n                    // #ifdef VUE3\r\n                    this.$emit('update:modelValue', []);\r\n                    // #endif\r\n                }\r\n            },\r\n            \r\n            // 清除某一条指定的数据，根据id实现\r\n            remove(id) {\r\n                // 遍历所有列查找并删除数据\r\n                for (let i = 0; i < this.columnList.length; i++) {\r\n                    const index = this.columnList[i].findIndex(val => val[this.idKey] == id);\r\n                    if (index !== -1) {\r\n                        this.columnList[i].splice(index, 1);\r\n                        break;\r\n                    }\r\n                }\r\n                \r\n                // 同时清除父组件的数据中的对应id的条目\r\n                // #ifdef VUE2\r\n                const valueIndex = this.value.findIndex(val => val[this.idKey] == id);\r\n                if (valueIndex !== -1) {\r\n                    const newValue = this.cloneData(this.value);\r\n                    newValue.splice(valueIndex, 1);\r\n                    this.$emit('input', newValue);\r\n                }\r\n                // #endif\r\n                // #ifdef VUE3\r\n                const modelValueIndex = this.modelValue.findIndex(val => val[this.idKey] == id);\r\n                if (modelValueIndex !== -1) {\r\n                    const newModelValue = this.cloneData(this.modelValue);\r\n                    newModelValue.splice(modelValueIndex, 1);\r\n                    this.$emit('update:modelValue', newModelValue);\r\n                }\r\n                // #endif\r\n            },\r\n            \r\n            // 修改某条数据的某个属性\r\n            modify(id, key, value) {\r\n                let found = false;\r\n                let targetItem = null;\r\n                \r\n                // 在所有列中查找数据\r\n                for (let i = 0; i < this.columnList.length; i++) {\r\n                    const index = this.columnList[i].findIndex(val => val[this.idKey] == id);\r\n                    if (index !== -1) {\r\n                        // 修改对应key的值\r\n                        this.columnList[i][index][key] = value;\r\n                        targetItem = this.columnList[i][index];\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                \r\n                if (found && targetItem) {\r\n                    // 修改父组件的数据中的对应id的条目\r\n                    // #ifdef VUE2\r\n                    const valueIndex = this.value.findIndex(val => val[this.idKey] == id);\r\n                    if (valueIndex !== -1) {\r\n                        let data = this.cloneData(this.value);\r\n                        data[valueIndex][key] = value;\r\n                        this.$emit('input', data);\r\n                    }\r\n                    // #endif\r\n                    // #ifdef VUE3\r\n                    const modelValueIndex = this.modelValue.findIndex(val => val[this.idKey] == id);\r\n                    if (modelValueIndex !== -1) {\r\n                        let data = this.cloneData(this.modelValue);\r\n                        data[modelValueIndex][key] = value;\r\n                        this.$emit('update:modelValue', data);\r\n                    }\r\n                    // #endif\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n    .u-waterfall {\r\n        @include flex;\r\n        flex-direction: row;\r\n        align-items: flex-start;\r\n    }\r\n\r\n    .u-column {\r\n        @include flex;\r\n        flex: 1;\r\n        flex-direction: column;\r\n        overflow: hidden;\r\n        /* #ifndef APP-NVUE */\r\n        height: 100%;\r\n        /* #endif */\r\n        // 添加列之间的间距\r\n        &:not(:first-child) {\r\n            margin-left: 10rpx;\r\n        }\r\n    }\r\n\r\n    .u-image {\r\n        /* #ifndef APP-NVUE */\r\n        max-width: 100%;\r\n        /* #endif */\r\n    }\r\n</style>","import Component from 'E:/uniapp/tourismuniapp/uni_modules/uview-plus/components/u-waterfall/u-waterfall.vue'\nwx.createComponent(Component)"],"names":["mpMixin","mixin","uni","sleep"],"mappings":"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"}